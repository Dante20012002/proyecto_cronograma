import { useState, useRef } from 'preact/hooks';
import * as XLSX from 'xlsx';
import { addEvent, draftScheduleRows, draftInstructors, addInstructor, draftGlobalConfig } from '../stores/schedule';
import type { Event, Instructor } from '../stores/schedule';
import { EVENT_COLORS, getColorForDetail, getRandomEventColor, hexToStyle, getContrastTextColor } from '../lib/colors';



/**
 * Interface para los datos del Excel parseados
 */
interface ExcelEventData {
  instructor: string;
  regional: string;
  titulo: string;
  detalles: string;
  ubicacion: string;
  dia: string;
  horaInicio: string;
  horaFin: string;
  modalidad?: string;
  color?: string;
}

/**
 * Interface para errores de validaci√≥n
 */
interface ValidationError {
  row: number;
  field: string;
  message: string;
  value: any;
}

/**
 * Props para el componente ExcelUploader
 */
interface ExcelUploaderProps {
  onClose: () => void;
}

/**
 * Funci√≥n para validar los datos del Excel
 */
function validateExcelData(data: any[]): { isValid: boolean; errors: ValidationError[]; validData: ExcelEventData[] } {
  const errors: ValidationError[] = [];
  const validData: ExcelEventData[] = [];

  // Campos requeridos (detalles y ubicacion ahora son opcionales)
  const requiredFields = ['instructor', 'regional', 'titulo', 'dia'];
  
  // D√≠as v√°lidos (lunes a viernes)
  const validDays = ['lunes', 'martes', 'miercoles', 'mi√©rcoles', 'jueves', 'viernes'];
  
  data.forEach((row, index) => {
    const rowNumber = index + 2; // +2 porque empezamos en fila 2 (despu√©s del header)
    
    // Convertir las claves a min√∫sculas para comparaci√≥n
    const normalizedRow: any = {};
    Object.keys(row).forEach(key => {
      normalizedRow[key.toLowerCase().trim()] = row[key];
    });

    // Validar campos requeridos
    requiredFields.forEach(field => {
      if (!normalizedRow[field] || String(normalizedRow[field]).trim() === '') {
        errors.push({
          row: rowNumber,
          field: field,
          message: `El campo "${field}" es requerido`,
          value: normalizedRow[field]
        });
      }
    });

    // Validar d√≠a
    if (normalizedRow.dia) {
      const dayValue = String(normalizedRow.dia).toLowerCase().trim();
      if (!validDays.includes(dayValue)) {
        errors.push({
          row: rowNumber,
          field: 'dia',
          message: `El d√≠a debe ser uno de: ${validDays.join(', ')}`,
          value: normalizedRow.dia
        });
      }
    }

    // Validar formato de hora
    if (normalizedRow.horainicio || normalizedRow['hora inicio']) {
      const horaInicio = normalizedRow.horainicio || normalizedRow['hora inicio'];
      if (!isValidTimeFormat(horaInicio)) {
        errors.push({
          row: rowNumber,
          field: 'horaInicio',
          message: 'La hora de inicio debe estar en formato "HH:MM a.m." o "HH:MM p.m."',
          value: horaInicio
        });
      }
    }

    if (normalizedRow.horafin || normalizedRow['hora fin']) {
      const horaFin = normalizedRow.horafin || normalizedRow['hora fin'];
      if (!isValidTimeFormat(horaFin)) {
        errors.push({
          row: rowNumber,
          field: 'horaFin',
          message: 'La hora de fin debe estar en formato "HH:MM a.m." o "HH:MM p.m."',
          value: horaFin
        });
      }
    }

    // Si no hay errores para esta fila, agregar a datos v√°lidos
    if (errors.filter(e => e.row === rowNumber).length === 0) {
      // Manejar campos opcionales con valores por defecto
      const detalles = normalizedRow.detalles ? String(normalizedRow.detalles).trim() : '';
      const ubicacion = normalizedRow.ubicacion ? String(normalizedRow.ubicacion).trim() : '';
      
      validData.push({
        instructor: String(normalizedRow.instructor).trim(),
        regional: String(normalizedRow.regional).trim(),
        titulo: String(normalizedRow.titulo).trim(),
        detalles: detalles,
        ubicacion: ubicacion || 'Por definir', // Valor por defecto si est√° vac√≠o
        dia: String(normalizedRow.dia).toLowerCase().trim(),
        horaInicio: normalizedRow.horainicio || normalizedRow['hora inicio'] || '',
        horaFin: normalizedRow.horafin || normalizedRow['hora fin'] || '',
        modalidad: normalizedRow.modalidad || '', // Modalidad opcional
        color: detalles ? getColorForDetail(detalles) : EVENT_COLORS[0] // Color por defecto si no hay detalles
      });
    }
  });

  return {
    isValid: errors.length === 0,
    errors,
    validData
  };
}

/**
 * Funci√≥n para validar formato de hora
 */
function isValidTimeFormat(time: string): boolean {
  if (!time) return true; // Opcional
  const timeRegex = /^(1[0-2]|0?[1-9]):([0-5][0-9])\s?(a\.m\.|p\.m\.)$/i;
  return timeRegex.test(String(time).trim());
}

/**
 * Funci√≥n para convertir d√≠a de texto a n√∫mero de fecha del mes
 */
function dayToNumber(day: string): string {
  try {
    // Obtener la semana actual del sistema
    const currentWeek = draftGlobalConfig.value.currentWeek;
    const startDate = new Date(currentWeek.startDate);
    
    // Mapeo de nombres de d√≠as a n√∫meros de d√≠a de la semana (0 = domingo, 1 = lunes, etc.)
    const dayNameToWeekDay: { [key: string]: number } = {
      'lunes': 1,
      'martes': 2,
      'miercoles': 3,
      'mi√©rcoles': 3,
      'jueves': 4,
      'viernes': 5
    };
    
    // Encontrar la fecha que corresponde al d√≠a solicitado
    const targetWeekDay = dayNameToWeekDay[day.toLowerCase()];
    if (targetWeekDay === undefined) {
      console.error('‚ùå D√≠a no v√°lido:', day);
      return startDate.getDate().toString();
    }
    
    // Ajustar la fecha hasta encontrar el d√≠a correcto
    const targetDate = new Date(startDate);
    while (targetDate.getDay() !== targetWeekDay) {
      targetDate.setDate(targetDate.getDate() + 1);
    }
    
    console.log('üìÖ DEBUG - C√°lculo de fecha:', {
      requestedDay: day,
      weekDayNumber: targetWeekDay,
      calculatedDate: targetDate.toISOString(),
      result: targetDate.getDate()
    });
    
    return targetDate.getDate().toString();
  } catch (error) {
    console.error('‚ùå Error en dayToNumber:', error);
    return new Date(draftGlobalConfig.value.currentWeek.startDate).getDate().toString();
  }
}

/**
 * Funci√≥n para procesar y cargar los datos al sistema
 */
async function processAndLoadData(data: ExcelEventData[]) {
  console.log('üìä processAndLoadData - Iniciando carga incremental de', data.length, 'eventos');
  
  // PASO 1: NO limpiar instructores existentes - mantener datos hist√≥ricos
  console.log('üìã Manteniendo instructores existentes con sus datos hist√≥ricos');
  
  // Agrupar eventos por instructor para procesamiento eficiente
  const eventsByInstructor = new Map<string, ExcelEventData[]>();
  
  data.forEach(eventData => {
    const instructorKey = eventData.instructor.toLowerCase();
    if (!eventsByInstructor.has(instructorKey)) {
      eventsByInstructor.set(instructorKey, []);
    }
    eventsByInstructor.get(instructorKey)!.push(eventData);
  });
  
  console.log('üë• processAndLoadData - Procesando', eventsByInstructor.size, 'instructores del Excel');
  
  // PASO 2: Verificar instructores existentes y crear nuevos solo si es necesario
  console.log('üîç PASO 2: Verificando instructores existentes...');
  const currentInstructors = draftInstructors.value;
  const currentRows = draftScheduleRows.value;
  const instructorMapping = new Map<string, string>(); // instructorKey -> instructorId
  
  // Mapear instructores existentes
  currentRows.forEach(row => {
    const instructorKey = row.instructor.toLowerCase();
    instructorMapping.set(instructorKey, row.id);
    console.log(`‚úÖ Instructor existente mapeado: ${row.instructor} ‚Üí ID: ${row.id}`);
  });
  
  // PASO 3: Crear solo instructores nuevos que no existan
  console.log('‚ûï PASO 3: Creando instructores nuevos (si es necesario)...');
  let newInstructorsCreated = 0;
  
  for (const [instructorKey, events] of eventsByInstructor.entries()) {
    if (!instructorMapping.has(instructorKey)) {
      // El instructor no existe, crearlo
    const instructorData = events[0]; // Tomar datos del primer evento
      console.log(`‚ûï Creando instructor nuevo: ${instructorData.instructor}`);
    
    // Crear el instructor
    addInstructor(instructorData.instructor, instructorData.regional);
      newInstructorsCreated++;
    
    // Esperar a que se actualice el estado
    await new Promise(resolve => setTimeout(resolve, 300));
    
      // Verificar que se cre√≥ correctamente y obtener su ID
      const updatedRows = draftScheduleRows.value;
      const createdRow = updatedRows.find(row => 
        row.instructor.toLowerCase() === instructorKey && 
        !instructorMapping.has(instructorKey) // Asegurar que es nuevo
    );
    
    if (createdRow) {
        instructorMapping.set(instructorKey, createdRow.id);
        console.log(`‚úÖ Instructor nuevo creado: ${createdRow.instructor} ‚Üí ID: ${createdRow.id}`);
    } else {
        console.error(`‚ùå ERROR: No se pudo crear instructor nuevo: ${instructorData.instructor}`);
        throw new Error(`No se pudo crear instructor nuevo: ${instructorData.instructor}`);
      }
    } else {
      // El instructor ya existe, usar el existente
      const existingId = instructorMapping.get(instructorKey)!;
      const existingRow = currentRows.find(row => row.id === existingId);
      const eventData = events[0];
      
      console.log(`üîÑ Instructor existente detectado: ${eventData.instructor}`);
      console.log(`   üìç Datos actuales: ${existingRow?.regional}`);
      console.log(`   üìç Datos del Excel: ${eventData.regional}`);
      
      // Verificar si hay cambios en regional
      if (existingRow && (
        existingRow.regional !== eventData.regional
      )) {
        console.log(`   ‚ö†Ô∏è INFORMACI√ìN: El instructor ${eventData.instructor} tiene diferentes datos de ubicaci√≥n para esta semana.`);
        console.log(`   üìù Esta es una situaci√≥n normal: los instructores pueden trabajar en diferentes regiones por semana.`);
        console.log(`   ‚úÖ Se mantendr√°n los datos hist√≥ricos y se agregar√°n eventos con la nueva ubicaci√≥n.`);
      }
    }
  }
  
  console.log(`üìä Resumen de instructores: ${currentRows.length - newInstructorsCreated} existentes + ${newInstructorsCreated} nuevos = ${instructorMapping.size} total`);
  
  // PASO 4: Agregar eventos a cada instructor (respetando datos hist√≥ricos)
  console.log('üìÖ PASO 4: Agregando eventos (modo incremental)...');
  
  for (const [instructorKey, events] of eventsByInstructor.entries()) {
    const instructorId = instructorMapping.get(instructorKey);
    
    if (!instructorId) {
      console.error(`‚ùå No se encontr√≥ ID para instructor: ${events[0].instructor}`);
      continue;
    }
    
    console.log(`üìÖ Procesando ${events.length} eventos para ${events[0].instructor} (ID: ${instructorId})`);
    
    for (let index = 0; index < events.length; index++) {
      const eventData = events[index];
      
      // Crear evento
      const timeString = eventData.horaInicio && eventData.horaFin 
        ? `${eventData.horaInicio} a ${eventData.horaFin}`
        : eventData.horaInicio || '';
      
      const eventTimestamp = Date.now() + index;
      const eventRandomId = Math.random().toString(36).substr(2, 9);
      const newEvent: Event = {
        id: `evt-${eventTimestamp}-${eventRandomId}`,
        title: eventData.titulo,
        details: eventData.detalles || 'Sin detalles especificados',
        time: timeString,
        location: eventData.ubicacion || 'Por definir',
        color: eventData.color || EVENT_COLORS[0],
        modalidad: eventData.modalidad
      };
      
      const dayNumber = dayToNumber(eventData.dia);
      
      console.log(`  ‚ûï Evento ${index + 1}/${events.length}: ${eventData.titulo} ‚Üí Instructor ID: ${instructorId}, D√≠a: ${dayNumber}`);
      
      // Agregar evento (se agrega a la semana actual, respetando eventos hist√≥ricos)
      addEvent(instructorId, dayNumber, newEvent);
      
      // Pausa corta entre eventos
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    console.log(`‚úÖ Completados eventos para: ${events[0].instructor}`);
  }
  
  console.log('‚úÖ processAndLoadData - Carga incremental completa de', data.length, 'eventos');
  
  // PASO 5: Verificaci√≥n final
  await verifyFinalState(eventsByInstructor.size, data.length, newInstructorsCreated);
}

/**
 * Funci√≥n para verificar el estado final despu√©s de la carga
 */
async function verifyFinalState(expectedNewInstructors: number, expectedEvents: number, newInstructorsCreated: number) {
  console.log('üîç Verificando estado final...');
  
  await new Promise(resolve => setTimeout(resolve, 500)); // Esperar que se estabilice
  
  const finalRows = draftScheduleRows.value;
  const finalInstructors = draftInstructors.value;
  
  const totalEvents = finalRows.reduce((sum, row) => 
    sum + Object.values(row.events).reduce((daySum, events) => daySum + events.length, 0), 0
  );
  
  console.log('üìä Estado final:');
  console.log(`  üë• Instructores totales en sistema: ${finalInstructors.length}`);
  console.log(`  üÜï Instructores nuevos creados: ${newInstructorsCreated}`);
  console.log(`  üìÖ Eventos totales en sistema: ${totalEvents}`);
  console.log(`  üìÖ Eventos agregados en esta carga: ${expectedEvents}`);
  
  // Mostrar detalle de cada instructor con eventos en la semana actual
  const currentWeek = draftGlobalConfig.value.currentWeek;
  console.log(`üìÖ Eventos para la semana: ${currentWeek.startDate} - ${currentWeek.endDate}`);
  
  finalRows.forEach(row => {
    const eventCount = Object.values(row.events).reduce((sum, events) => sum + events.length, 0);
    console.log(`  üë§ ${row.instructor} (${row.regional}): ${eventCount} eventos totales`);
  });
  
  const success = newInstructorsCreated >= 0 && totalEvents >= expectedEvents;
  
  if (success) {
    console.log('‚úÖ Verificaci√≥n exitosa: Carga incremental completada correctamente');
    console.log('üìù Los datos hist√≥ricos se han preservado');
    console.log('üÜï Los nuevos eventos se han agregado a la semana actual');
  } else {
    console.warn('‚ö†Ô∏è Verificaci√≥n con diferencias detectadas');
  }
  
  return success;
}

/**
 * Funci√≥n para debugging de la carga masiva - expuesta globalmente
 */
function debugExcelUpload() {
  const currentRows = draftScheduleRows.value;
  const currentInstructors = draftInstructors.value;
  
  console.log('üîç DEBUG EXCEL UPLOAD - Estado actual:');
  console.log('üë• Total instructores:', currentInstructors.length);
  console.log('üìã Total filas:', currentRows.length);
  
  // Mostrar cada instructor con sus eventos
  currentRows.forEach(row => {
    const totalEvents = Object.values(row.events).reduce((sum, events) => sum + events.length, 0);
    console.log(`\nüë§ ${row.instructor} (${row.regional})`);
    console.log(`  üìÖ Total eventos: ${totalEvents}`);
    
    // Mostrar eventos por d√≠a
    Object.entries(row.events).forEach(([day, events]) => {
      if (events.length > 0) {
        console.log(`    D√≠a ${day}: ${events.length} eventos`);
        events.forEach(event => {
          console.log(`      - ${event.title} (${event.location})`);
        });
      }
    });
  });
  
  return {
    instructors: currentInstructors.length,
    rows: currentRows.length,
    totalEvents: currentRows.reduce((sum, row) => 
      sum + Object.values(row.events).reduce((daySum, events) => daySum + events.length, 0), 0
    )
  };
}

// Exponer globalmente para debugging
if (typeof window !== 'undefined') {
  (window as any).debugExcelUpload = debugExcelUpload;
  
  // Funci√≥n adicional para verificar despu√©s de la carga
  (window as any).verifyExcelLoad = () => {
    const result = debugExcelUpload();
    console.log('\nüîç VERIFICACI√ìN POST-CARGA:');
    console.log(`üìä Se encontraron ${result.instructors} instructores con ${result.totalEvents} eventos totales`);
    
    if (result.instructors === 0) {
      console.log('‚ùå PROBLEMA: No se encontraron instructores');
    } else if (result.totalEvents === 0) {
      console.log('‚ùå PROBLEMA: No se encontraron eventos');
    } else {
      console.log('‚úÖ La carga parece exitosa');
    }
    
    return result;
  };
  
  // Funci√≥n para probar el mapeo de d√≠as
  (window as any).testDayMapping = () => {
    const days = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes'];
    console.log('\nüìÖ PRUEBA DE MAPEO DE D√çAS:');
    days.forEach(day => {
      const result = dayToNumber(day);
      console.log(`${day} ‚Üí ${result}`);
    });
  };
  
  // Funci√≥n para limpiar duplicados manualmente
  (window as any).cleanupInstructorDuplicates = async () => {
    console.log('üßπ Iniciando limpieza manual de duplicados...');
    console.log('‚ö†Ô∏è Esta funci√≥n a√∫n no est√° implementada. Usa el AdminToolbar para limpiar duplicados.');
    console.log('‚úÖ Para verificar el estado actual, ejecuta verifyExcelLoad()');
  };
}

/**
 * Lista de t√≠tulos predefinidos
 */
const predefinedTitles = [
  'ESCUELA DE PROMOTORES',
  'INDUSTRIA LIMPIA',
  'ESCUELA DE ADMINISTRADORES',
  'LEALTAD',
  'RED VIRTUAL',
  'EDS CONFIABLE',
  'RUMBO',
  'ESCUELA DE TIENDAS'
];

/**
 * Lista de detalles predefinidos
 */
const predefinedDetails = [
  'M√≥dulo Protagonistas del Servicio',
  'M√≥dulo Formativo GNV',
  'M√≥dulo Formativo L√≠quidos',
  'M√≥dulo Formativo Lubricantes',
  'Protocolo de Servicio EDS',
  'Gesti√≥n Ambiental, Seguridad y Salud en el Trabajo',
  'M√≥dulo Escuela de Industria',
  'Excelencia Administrativa',
  'Vive PITS',
  'La Toma Vive Terpel & Vive PITS',
  'Formaci√≥n Inicial Terpel POS Operativo',
  'Facturaci√≥n Electr√≥nica Operativa',
  'Facturaci√≥n Electr√≥nica Administrativa',
  'Canastilla',
  'Entrenamiento Terpel POS Operativo',
  'Entrenamiento Terpel POS Administrativo',
  'Formaci√≥n Inicial Terpel POS Administrativo',
  'Clientes Propios Administrativo',
  'Masterlub Operativo',
  'Masterlub Administrativo',
  'EDS Confiable',
  'Campo de Entrenamiento de Industria Limpia',
  'Caravana Rumbo PITS',
  'App Terpel',
  'M√≥dulo Rollos',
  'M√≥dulo Historia y Masa',
  'M√≥dulo Strombolis',
  'M√≥dulo Perros y M√°s Perros',
  'M√≥dulo S√°nduches',
  'M√≥dulo Sbarro',
  'M√≥dulo Bebidas Calientes',
  'Construyendo Equipos Altamente Efectivos',
  'Taller EDS Confiable',
  'Festivo',
  'Gesti√≥n Administrativa',
  'Actualizaci√≥n de Contenidos',
  'Vacaciones',
  'Traslado',
  'Acompa√±amiento'
];

/**
 * Funci√≥n para descargar plantilla de Excel
 */
function downloadTemplate() {
  const wb = XLSX.utils.book_new();
  
  // Obtener instructores existentes del sistema
  const existingInstructors = draftInstructors.value.map(instructor => ({
    name: instructor.name,
    regional: instructor.regional
  }));
  
  console.log('üìã Instructores existentes para plantilla:', existingInstructors.length);
  
  // --- PESTA√ëA 1: PLANTILLA DE EVENTOS ---
  const templateData = [
    {
      'Instructor': 'JUAN PABLO HERNANDEZ',
      'Regional': 'BUCARAMANGA',
      'Titulo': 'ESCUELA DE PROMOTORES',
      'Detalles': 'MODULO PROTAGONISTAS DEL SERVICIO',
      'Ubicacion': 'Bucaramanga',
      'Dia': 'lunes',
      'Hora Inicio': '8:00 a.m.',
      'Hora Fin': '5:00 p.m.',
      'Modalidad': 'Presencial'
    },
    {
      'Instructor': 'ZULAY VERA',
      'Regional': 'NORTE',
      'Titulo': 'INDUSTRIA LIMPIA',
      'Detalles': 'MODULO FORMATIVO LIQUIDOS',
      'Ubicacion': 'C√∫cuta',
      'Dia': 'martes',
      'Hora Inicio': '9:00 a.m.',
      'Hora Fin': '4:00 p.m.',
      'Modalidad': 'Virtual'
    }
  ];
  
  const ws1 = XLSX.utils.json_to_sheet(templateData);
  
  // Ajustar ancho de columnas para la plantilla
  const colWidths1 = [
    { wch: 25 }, // Instructor
    { wch: 15 }, // Regional
    { wch: 30 }, // Titulo
    { wch: 45 }, // Detalles
    { wch: 20 }, // Ubicacion
    { wch: 10 }, // Dia
    { wch: 15 }, // Hora Inicio
    { wch: 15 }, // Hora Fin
    { wch: 12 }  // Modalidad
  ];
  ws1['!cols'] = colWidths1;
  
  XLSX.utils.book_append_sheet(wb, ws1, 'Plantilla');
  
  // --- PESTA√ëA 2: DATOS DISPONIBLES ---
  
  // Preparar datos para la pesta√±a de referencia
  const maxLength = Math.max(
    predefinedTitles.length,
    predefinedDetails.length,
    existingInstructors.length, // Incluir instructores en el c√°lculo del tama√±o
    20 // Para otros datos
  );
  
  const referenceData = [];
  
  for (let i = 0; i < maxLength; i++) {
    const row: any = {};
    
    // Instructores existentes
    if (i < existingInstructors.length) {
      const instructor = existingInstructors[i];
      row['Instructores Existentes'] = instructor.name;
      row['Regional del Instructor'] = instructor.regional;
    } else {
      row['Instructores Existentes'] = '';
      row['Regional del Instructor'] = '';
    }
    
    // T√≠tulos predefinidos
    if (i < predefinedTitles.length) {
      row['T√≠tulos Disponibles'] = predefinedTitles[i];
    } else {
      row['T√≠tulos Disponibles'] = '';
    }
    
    // Detalles predefinidos
    if (i < predefinedDetails.length) {
      row['Detalles Disponibles'] = predefinedDetails[i];
    } else {
      row['Detalles Disponibles'] = '';
    }
    
    // D√≠as v√°lidos
    const validDays = ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes'];
    if (i < validDays.length) {
      row['D√≠as V√°lidos'] = validDays[i];
    } else {
      row['D√≠as V√°lidos'] = '';
    }
    
    // Ejemplos de horas
    const exampleTimes = [
      '7:00 a.m.', '7:30 a.m.', '8:00 a.m.', '8:30 a.m.', '9:00 a.m.',
      '9:30 a.m.', '10:00 a.m.', '10:30 a.m.', '11:00 a.m.', '11:30 a.m.',
      '12:00 p.m.', '12:30 p.m.', '1:00 p.m.', '1:30 p.m.', '2:00 p.m.',
      '2:30 p.m.', '3:00 p.m.', '3:30 p.m.', '4:00 p.m.', '4:30 p.m.', '5:00 p.m.',
      '5:30 p.m.', '6:00 p.m.', '6:30 p.m.', '7:00 p.m.', '7:30 p.m.', '8:00 p.m.',
      '8:30 p.m.', '9:00 p.m.', '9:30 p.m.', '10:00 p.m.'
    ];
    if (i < exampleTimes.length) {
      row['Horas Disponibles'] = exampleTimes[i];
    } else {
      row['Horas Disponibles'] = '';
    }
    
    referenceData.push(row);
  }
  
  const ws2 = XLSX.utils.json_to_sheet(referenceData);
  
  // Ajustar ancho de columnas para la referencia (ACTUALIZADO)
  const colWidths2 = [
    { wch: 30 }, // Instructores Existentes
    { wch: 20 }, // Regional del Instructor
    { wch: 35 }, // T√≠tulos Disponibles
    { wch: 50 }, // Detalles Disponibles
    { wch: 15 }, // D√≠as V√°lidos
    { wch: 18 }  // Horas Disponibles
  ];
  ws2['!cols'] = colWidths2;
  
  XLSX.utils.book_append_sheet(wb, ws2, 'Datos Disponibles');
  
  // --- PESTA√ëA 3: INSTRUCCIONES ---
  
  const instructionsData = [
    { 'Campo': 'Instructor', 'Descripci√≥n': 'Nombre completo del instructor', 'Obligatorio': 'S√ç', 'Ejemplo': 'JUAN PABLO HERNANDEZ', 'Notas': `üìã RECOMENDADO: Usa los nombres exactos de la pesta√±a "Datos Disponibles" (${existingInstructors.length} instructores disponibles). Si usas un nombre nuevo, se crear√° autom√°ticamente.` },
    { 'Campo': 'Regional', 'Descripci√≥n': 'Regional a la que pertenece', 'Obligatorio': 'S√ç', 'Ejemplo': 'BUCARAMANGA', 'Notas': 'Si usas un instructor existente, usa la misma regional para consistencia' },
    { 'Campo': 'Titulo', 'Descripci√≥n': 'T√≠tulo del evento', 'Obligatorio': 'S√ç', 'Ejemplo': 'ESCUELA DE PROMOTORES', 'Notas': 'Usar t√≠tulos de la pesta√±a "Datos Disponibles" o crear uno nuevo' },
    { 'Campo': 'Detalles', 'Descripci√≥n': 'Detalles espec√≠ficos del evento', 'Obligatorio': 'NO', 'Ejemplo': 'MODULO PROTAGONISTAS DEL SERVICIO', 'Notas': 'Usar detalles predefinidos para color autom√°tico. Si se deja vac√≠o, se usar√° "Sin detalles especificados"' },
    { 'Campo': 'Ubicacion', 'Descripci√≥n': 'Lugar espec√≠fico del evento', 'Obligatorio': 'NO', 'Ejemplo': 'Bucaramanga', 'Notas': 'Puede ser sede espec√≠fica, ubicaci√≥n, etc. Si se deja vac√≠o, se usar√° "Por definir"' },
    { 'Campo': 'Dia', 'Descripci√≥n': 'D√≠a de la semana', 'Obligatorio': 'S√ç', 'Ejemplo': 'lunes', 'Notas': 'Solo: lunes, martes, mi√©rcoles, jueves, viernes (min√∫sculas)' },
    { 'Campo': 'Hora Inicio', 'Descripci√≥n': 'Hora de inicio del evento', 'Obligatorio': 'NO', 'Ejemplo': '8:00 a.m.', 'Notas': 'Formato: HH:MM a.m. o HH:MM p.m.' },
    { 'Campo': 'Hora Fin', 'Descripci√≥n': 'Hora de finalizaci√≥n del evento', 'Obligatorio': 'NO', 'Ejemplo': '5:00 p.m.', 'Notas': 'Formato: HH:MM a.m. o HH:MM p.m.' },
    { 'Campo': 'Modalidad', 'Descripci√≥n': 'Modalidad del evento', 'Obligatorio': 'NO', 'Ejemplo': 'Presencial', 'Notas': 'Valores v√°lidos: Presencial, Virtual. Si se deja vac√≠o, no se mostrar√° modalidad' },
    { 'Campo': '', 'Descripci√≥n': '', 'Obligatorio': '', 'Ejemplo': '', 'Notas': '' },
    { 'Campo': 'üë• INSTRUCTORES:', 'Descripci√≥n': 'Comportamiento del sistema', 'Obligatorio': '', 'Ejemplo': '', 'Notas': '' },
    { 'Campo': 'Instructores existentes:', 'Descripci√≥n': `${existingInstructors.length} instructores ya est√°n en el sistema`, 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'Revisa la pesta√±a "Instructores" para ver la lista completa' },
    { 'Campo': 'Modo incremental:', 'Descripci√≥n': 'Se conservan TODOS los datos hist√≥ricos', 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'Los eventos se AGREGAN a la semana actual sin eliminar semanas anteriores' },
    { 'Campo': 'Nuevos instructores:', 'Descripci√≥n': 'Si usas un nombre nuevo, se crear√° autom√°ticamente', 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'No se eliminan instructores existentes, solo se agregan nuevos si es necesario' },
    { 'Campo': 'Regional:', 'Descripci√≥n': 'Pueden cambiar semana a semana', 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'Es normal que un instructor trabaje en diferentes regiones. Los datos hist√≥ricos se preservan' },
    { 'Campo': '', 'Descripci√≥n': '', 'Obligatorio': '', 'Ejemplo': '', 'Notas': '' },
    { 'Campo': 'üé® COLORES:', 'Descripci√≥n': 'Colores Autom√°ticos', 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'Los detalles predefinidos tienen colores autom√°ticos' },
    { 'Campo': 'Azules:', 'Descripci√≥n': 'M√≥dulos formativos', 'Obligatorio': '', 'Ejemplo': 'MODULO PROTAGONISTAS DEL SERVICIO', 'Notas': 'MODULO FORMATIVO GNV, MODULO FORMATIVO LIQUIDOS, etc.' },
    { 'Campo': 'Verdes:', 'Descripci√≥n': 'Protocolos y gesti√≥n', 'Obligatorio': '', 'Ejemplo': 'PROTOCOLO DE SERVICIO EDS', 'Notas': 'GESTION AMBIENTAL, EXCELENCIA ADMINISTRATIVA' },
    { 'Campo': 'P√∫rpuras:', 'Descripci√≥n': 'Programas VIVE', 'Obligatorio': '', 'Ejemplo': 'VIVE PITS', 'Notas': 'LA TOMA VIVE TERPEL, CARAVANA RUMBO PITS' },
    { 'Campo': 'Naranjas:', 'Descripci√≥n': 'Formaci√≥n TERPEL POS', 'Obligatorio': '', 'Ejemplo': 'FORMACION INICIAL TERPEL POS OPERATIVO', 'Notas': 'ENTRENAMIENTO TERPEL POS ADMINISTRATIVO' },
    { 'Campo': 'Y m√°s...', 'Descripci√≥n': 'Ver pesta√±a "Datos Disponibles"', 'Obligatorio': '', 'Ejemplo': '', 'Notas': 'Cada categor√≠a tiene su color espec√≠fico' }
  ];
  
  const ws3 = XLSX.utils.json_to_sheet(instructionsData);
  
  // Ajustar ancho de columnas para las instrucciones
  const colWidths3 = [
    { wch: 18 }, // Campo
    { wch: 35 }, // Descripci√≥n
    { wch: 12 }, // Obligatorio
    { wch: 35 }, // Ejemplo
    { wch: 55 }  // Notas (m√°s ancho para las nuevas instrucciones)
  ];
  ws3['!cols'] = colWidths3;
  
  XLSX.utils.book_append_sheet(wb, ws3, 'Instrucciones');
  
  // --- PESTA√ëA 4: SOLO INSTRUCTORES (Nueva pesta√±a dedicada) ---
  
  if (existingInstructors.length > 0) {
    const instructorsData = existingInstructors.map((instructor, index) => ({
      'N¬∫': index + 1,
      'Nombre del Instructor': instructor.name,
      'Regional': instructor.regional,
      'Nota': 'Copia exactamente este nombre para evitar duplicados'
    }));
    
    const ws4 = XLSX.utils.json_to_sheet(instructorsData);
    
    // Ajustar ancho de columnas para instructores
    const colWidths4 = [
      { wch: 5 },  // N¬∫
      { wch: 35 }, // Nombre del Instructor
      { wch: 20 }, // Regional
      { wch: 45 }  // Nota
    ];
    ws4['!cols'] = colWidths4;
    
    XLSX.utils.book_append_sheet(wb, ws4, `Instructores (${existingInstructors.length})`);
  }
  
  // Guardar el archivo
  const fileName = existingInstructors.length > 0 
    ? `plantilla_eventos_con_${existingInstructors.length}_instructores.xlsx`
    : 'plantilla_eventos_completa.xlsx';
    
  XLSX.writeFile(wb, fileName);
  
  // Mostrar mensaje informativo
  const message = existingInstructors.length > 0 
    ? `‚úÖ Plantilla descargada con ${existingInstructors.length} instructores existentes.\n\nüìã Revisa las pesta√±as:\n‚Ä¢ "Instructores (${existingInstructors.length})" - Lista completa de instructores\n‚Ä¢ "Datos Disponibles" - Todos los datos de referencia\n‚Ä¢ "Instrucciones" - Gu√≠a detallada\n\nüí° Usa los nombres exactos de instructores para evitar duplicados.`
    : '‚úÖ Plantilla descargada. No hay instructores existentes en el sistema.';
    
  alert(message);
}

/**
 * Componente principal ExcelUploader
 */
export default function ExcelUploader({ onClose }: ExcelUploaderProps) {
  const [file, setFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [previewData, setPreviewData] = useState<ExcelEventData[]>([]);
  const [errors, setErrors] = useState<ValidationError[]>([]);
  const [showPreview, setShowPreview] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (e: any) => {
    const target = e.target as HTMLInputElement;
    if (target.files && target.files[0]) {
      setFile(target.files[0]);
      setShowPreview(false);
      setPreviewData([]);
      setErrors([]);
    }
  };

  const handleProcessFile = async () => {
    if (!file) return;
    
    setIsLoading(true);
    try {
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);
      
      console.log('üìä Datos del Excel parseados:', jsonData);
      
      const validation = validateExcelData(jsonData);
      
      if (validation.isValid) {
        setPreviewData(validation.validData);
        setErrors([]);
        setShowPreview(true);
      } else {
        setErrors(validation.errors);
        setPreviewData([]);
        setShowPreview(false);
      }
    } catch (error) {
      console.error('Error al procesar el archivo:', error);
      setErrors([{
        row: 0,
        field: 'file',
        message: 'Error al leer el archivo. Aseg√∫rate de que sea un archivo Excel v√°lido.',
        value: file.name
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleLoadData = async () => {
    if (previewData.length > 0) {
      console.log('üöÄ Iniciando carga de eventos desde Excel...');
      
      // Mostrar resumen de lo que se va a cargar
      const instructorCounts = new Map<string, number>();
      previewData.forEach(event => {
        const count = instructorCounts.get(event.instructor) || 0;
        instructorCounts.set(event.instructor, count + 1);
      });
      
      console.log('üìä Resumen de carga:');
      instructorCounts.forEach((count, instructor) => {
        console.log(`  üë§ ${instructor}: ${count} eventos`);
      });
      
      try {
        // Ejecutar la carga (ahora es as√≠ncrona)
        await processAndLoadData(previewData);
        
        // Verificar el resultado final
        const finalResult = debugExcelUpload();
        
        // Mostrar mensaje de √©xito con detalles
        const instructorList = Array.from(instructorCounts.keys());
        const successMessage = `‚úÖ CARGA INCREMENTAL COMPLETADA EXITOSAMENTE
        
üìä Resumen:
‚Ä¢ ${previewData.length} eventos procesados desde Excel
‚Ä¢ ${instructorList.length} instructores en el archivo Excel
‚Ä¢ ${finalResult.instructors} instructores totales en el sistema
‚Ä¢ ${finalResult.totalEvents} eventos totales en el sistema

üîÑ Modo incremental activado:
‚úÖ Se conservaron todos los datos hist√≥ricos
‚úÖ Solo se agregaron eventos nuevos para la semana actual
‚úÖ Instructores existentes mantuvieron sus datos anteriores

üë• Instructores procesados del Excel:
${instructorList.slice(0, 5).join('\n')}${instructorList.length > 5 ? '\n...' : ''}

üí° IMPORTANTE: Los instructores pueden tener diferentes regionales
   por semana. Esto es normal y los datos hist√≥ricos se preservan.

Usa verifyExcelLoad() en la consola para verificar el estado.`;
        
        alert(successMessage);
        onClose();
      } catch (error) {
        console.error('‚ùå Error durante la carga:', error);
        alert('‚ùå Error durante la carga de eventos. Revisa la consola para m√°s detalles.');
      }
    }
  };

  const handleReset = () => {
    setFile(null);
    setPreviewData([]);
    setErrors([]);
    setShowPreview(false);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">üìä Carga Masiva de Eventos</h2>
            <button
              onClick={onClose}
              class="text-gray-400 hover:text-gray-600 text-2xl font-bold"
            >
              √ó
            </button>
          </div>

          {/* Instrucciones */}
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <h3 class="font-semibold text-blue-900 mb-2">üìã Instrucciones:</h3>
            <ol class="text-sm text-blue-800 space-y-1">
              <li>1. Descarga la plantilla de Excel haciendo clic en el bot√≥n de abajo</li>
              <li>2. Llena la plantilla con tus datos (una fila por evento)</li>
              <li>3. <strong>Campos obligatorios:</strong> Instructor, Regional, T√≠tulo, D√≠a</li>
              <li>4. <strong>Campos opcionales:</strong> Detalles, Ubicaci√≥n, Horas</li>
              <li>5. Sube el archivo Excel completado</li>
              <li>6. Revisa la vista previa y confirma la carga</li>
            </ol>
            <div class="mt-3 p-3 bg-green-50 border border-green-200 rounded">
              <p class="text-sm text-green-800 font-medium">
                üîÑ <strong>Modo Incremental:</strong> Tus datos hist√≥ricos est√°n seguros. 
                Los eventos se agregan a la semana actual sin eliminar informaci√≥n anterior.
              </p>
            </div>
          </div>

          {/* Bot√≥n de plantilla */}
          <div class="mb-6">
            <button
              onClick={downloadTemplate}
              class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              üì• Descargar Plantilla Excel
            </button>
          </div>

          {/* Selector de archivo */}
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Seleccionar archivo Excel:
            </label>
            <input
              ref={fileInputRef}
              type="file"
              accept=".xlsx,.xls"
              onChange={handleFileSelect}
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {/* Botones de acci√≥n */}
          <div class="flex gap-3 mb-6">
            <button
              onClick={handleProcessFile}
              disabled={!file || isLoading}
              class={`px-4 py-2 rounded-lg transition-colors ${
                !file || isLoading
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-blue-600 text-white hover:bg-blue-700'
              }`}
            >
              {isLoading ? '‚è≥ Procesando...' : 'üîç Procesar Archivo'}
            </button>
            
            <button
              onClick={handleReset}
              class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
            >
              üîÑ Reiniciar
            </button>
          </div>

          {/* Errores */}
          {errors.length > 0 && (
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <h3 class="font-semibold text-red-900 mb-2">‚ùå Errores encontrados:</h3>
              <div class="max-h-40 overflow-y-auto">
                {errors.map((error, index) => (
                  <div key={index} class="text-sm text-red-800 mb-1">
                    <strong>Fila {error.row}:</strong> {error.message}
                    {error.value && <em> (Valor: "{error.value}")</em>}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Vista previa */}
          {showPreview && previewData.length > 0 && (
            <div class="mb-6">
              <h3 class="font-semibold text-gray-900 mb-3">
                üëÅÔ∏è Vista Previa ({previewData.length} eventos)
              </h3>
              <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 max-h-60 overflow-y-auto">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {previewData.slice(0, 10).map((event, index) => (
                    <div key={index} class="bg-white p-3 rounded border">
                      <div class="flex items-center gap-2 mb-2">
                        <div class={`w-3 h-3 rounded-full ${event.color}`}></div>
                        <strong class="text-sm">{event.titulo}</strong>
                      </div>
                      <div class="text-xs text-gray-600 space-y-1">
                        <div>üë§ {event.instructor}</div>
                        <div>üìç {event.ubicacion}</div>
                        <div>üìÖ {event.dia} {event.horaInicio && `${event.horaInicio} - ${event.horaFin}`}</div>
                      </div>
                    </div>
                  ))}
                </div>
                {previewData.length > 10 && (
                  <p class="text-sm text-gray-600 mt-3">
                    ... y {previewData.length - 10} eventos m√°s
                  </p>
                )}
              </div>
            </div>
          )}
          
          {/* Botones finales */}
          <div class="flex justify-end gap-3">
            <button
              onClick={onClose}
              class="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
            >
              Cancelar
            </button>
            {showPreview && previewData.length > 0 && (
              <button
                onClick={handleLoadData}
                class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                ‚úÖ Cargar {previewData.length} Eventos
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 